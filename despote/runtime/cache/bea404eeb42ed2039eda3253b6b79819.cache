a:4:{s:8:"category";s:6:"前端";s:5:"title";s:17:"AJAX 学习笔记";s:7:"content";s:5657:"<h1>一. 创建 AJAX 对象</h1>
<h2>1. 主流浏览器</h2>
<pre><code class="language-js">var xhr = new XMLHttpRequest()</code></pre>
<h2>2. IE</h2>
<p>PS：IE7 以上版本的浏览器兼容主流浏览器</p>
<pre><code class="language-js">// IE6、7
var xhr = new ActiveXObject("Microsoft.XMLHTTP");
// IE8、9
var xhr = new ActiveXObject("Msxml2.XMLHTTP");
// IE10
var xhr = new ActiveXObject("Msxml2.XMLHTTP.3.0");
// IE11
var xhr = new ActiveXObject("Msxml2.XMLHTTP.5.0");
// 最终版 AJAX
var xhr = new ActiveXObject("Msxml2.XMLHTTP.6.0");</code></pre>
<h1>二. 使用 AJAX 发送一个 GET 请求</h1>
<h2>1. 创建 AJAX 对象</h2>
<pre><code class="language-js">var xhr = new XMLHttpRequest();</code></pre>
<h2>2. 创建 HTTP 请求</h2>
<pre><code class="language-js">// xhr.open(请求方式get/post, url地址)
xhr.open('get', '/index.php');</code></pre>
<h2>3. 发送请求</h2>
<pre><code class="language-js">// xhr.send(请求内容，如果是 get 则为 NULL，为 POST 则为传递给服务器的信息)
xhr.send(null);</code></pre>
<h1>三. 使用 AJAX 接收一个 GET 请求</h1>
<p>AJAX 可以接收所有浏览器能够接收的信息，如：字符串、HTML、CSS、XML、json</p>
<h2>1. 发送 AJAX 请求</h2>
<p>创建一个 AJAX 对象并发起 HTTP 请求</p>
<h2>2. 接收 AJAX 请求的响应</h2>
<p>AJAX 发送完请求后，可以调用 AJAX 对象的 <code>responseText</code> 属性获取服务器响应的信息 (以字符串的形式)，由于网络延迟等等原因，AJAX 拥有几个状态如下：</p>
<pre><code class="language-js">readyState 属性的几个值：
    0：刚创建 AJAX 对象
    1：已经调用 open 方法
    2：已经调用 send 方法
    3：数据返回中，返回部分数据
    4：请求完成，数据完整返回
onreadystatechange 事件：当 AJAX 状态 readyState 发生改变时触发，最好再创建 AJAX 对象后就创建事件：
    xhr.onreadystatechange = function() {
        // 最多只能获取 1、2、3、4 几个状态
        if (xhr.readyState == 4) {
            // 显示返回的信息
            document.getElementById('result').innerHTML = xhr.responseText;
        }
    }</code></pre>
<h1>四. GET 请求注意事项</h1>
<p>GET 传递时需要对中文、特殊符号进行编码处理，否则会出现异常(部分浏览器能自动编码中文)</p>
<h2>1. JavaScript 处理</h2>
<p>使用函数：<code>encodeURIComponent()</code> 函数进行实体转换</p>
<h2>2. PHP 处理</h2>
<p>使用函数：<code>urlencode()</code> 进行编码，需要使用 <code>urldecode()</code> 进行解码</p>
<h1>五. 使用 AJAX 发送一个 POST 请求</h1>
<h2>1. 创建 AJAX 对象</h2>
<pre><code class="language-js">var xhr = new XMLHttpRequest();</code></pre>
<h2>2. 创建 HTTP 请求</h2>
<pre><code class="language-js">// xhr.open(请求方式get/post, url地址)
xhr.open('post', '/index.php');</code></pre>
<h2>3. 发送请求</h2>
<pre><code class="language-js">// xhr.send(请求内容，如果是 get 则为 NULL，为 POST 则为传递给服务器的信息)
xhr.send("action=123&amp;user=root");</code></pre>
<h1>六. 使用 AJAX 接收一个 POST 请求</h1>
<p>需要在调用 <code>open()</code> 后设置请求头为 XML 解析：<code>xhr.setRequsetHeader("content-type","application/x-www-form-urlencoded")</code></p>
<h1>七. POST 请求注意事项</h1>
<ul>
<li>给服务器传递数据使用的是 <code>send()</code> 方法</li>
<li>调用方法 <code>setRequsetHeader()</code> 把传递的数组组织为 <code>xml</code>格式</li>
<li>传递中文时不需要编码，但是传递特殊符号时需要</li>
<li>可以同时传递 GET 参数信息</li>
</ul>
<h1>八. 同步请求/异步请求</h1>
<p>使用 <code>open()</code> 的第三个参数可以指定为同步请求或是异步请求(true 为异步，false 为同步)</p>
<h1>九. AJAX 对 XML 的处理</h1>
<p>使用属性：<code>xhr.responseXML</code> 属性获取返回 XML 文档的 DOM 父节点的上一级结点</p>
<h1>十. IE 缓存动态页面的处理方法</h1>
<p>IE 浏览器会对动态脚本也进行缓存，导致多次请求同一个脚本只会执行一次，有两种方法可以解决：</p>
<ul>
<li>给脚本传递一个随机数：<code>'index.php?' + Math.random();</code>，(推荐)</li>
<li>给浏览器设置 <code>header</code>，强制要求不缓存：
<pre><code class="language-php">
// 设置 header 头禁用缓存的 PHP 代码
header("Cache-Control:no-cache");
header("Pragma:no-cache");
header("Expires:-1");
``</code></pre></li>
</ul>
<h1>十一. PHP 创建 JSON 对象</h1>
<h2>1. 将数组转为 JSON</h2>
<p>使用函数：<code>json_encode(关联数组/索引关联数组);</code>，该函数返回一个 JSON 对象，当其参数为索引数组时，返回 JS 数组 ({&quot;键&quot;:&quot;值&quot;}，JSON 对单/双引号敏感)</p>
<h2>2. 将对象转为 JSON</h2>
<p>同样使用函数：<code>json_encode(关联数组/索引关联数组);</code>，转换时只转换成员属性，不转换成员方法({&quot;属性名&quot;:&quot;值&quot;})</p>
<h1>十二. PHP 解析 JOSN 对象</h1>
<h2>1. JSON 转换为对象</h2>
<p>使用函数：<code>json_decode(JSON 字符串);</code>，该函数返回一个对象，包含有成员属性</p>
<h2>2. JSON 转换为数组</h2>
<p>使用函数：<code>json_decode(JSON 字符串, true);</code>，第二个参数表示是否以数组形式返回，默认为 false</p>
<h2>3. JSON 转化为 JS 对象</h2>
<p>使用 <code>eval(字符串);</code> 可以运行作为参数的字符串，然后就能取到对象了</p>";s:4:"date";i:1489900256;}